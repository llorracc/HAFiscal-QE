#!/bin/bash

# HAFiscal Pre-Commit Protection Hook
# Prevents massive accidental changes and requires confirmation

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo "🔍 HAFiscal Pre-Commit Safety Check..."

# ============================================================================
# SST Validation: Ensure Single Source of Truth pattern is maintained
# ============================================================================
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🔐 Validating Single Source of Truth (SST) pattern..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check if SST-related files are being modified
SST_FILES_MODIFIED=$(git diff --cached --name-only | grep -E '(\.devcontainer/setup\.sh|\.github/workflows/push-build-docs\.yml|@resources/environment/setup-latex-minimal\.sh)' | wc -l)

if [ $SST_FILES_MODIFIED -gt 0 ]; then
    echo "   📝 SST-related files detected in commit"
    echo ""
    
    # Run SST validation
    if bash @resources/environment/validate-sst.sh; then
        echo -e "${GREEN}   ✅ SST validation passed${NC}"
    else
        echo ""
        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${RED}❌ SST VALIDATION FAILED${NC}"
        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        echo "Your commit modifies SST-related files but violates the SST pattern."
        echo ""
        echo "Common issues:"
        echo "  • Direct LaTeX installation in .devcontainer/setup.sh"
        echo "  • Direct LaTeX installation in .github/workflows/push-build-docs.yml"
        echo "  • Missing call to @resources/environment/setup-latex-minimal.sh"
        echo ""
        echo "To fix:"
        echo "  1. Remove direct LaTeX setup from .devcontainer/setup.sh or workflows"
        echo "  2. Put LaTeX changes in @resources/environment/setup-latex-minimal.sh"
        echo "  3. Ensure both files call the SST script"
        echo ""
        echo "Documentation: @resources/environment/README.md"
        echo ""
        echo "To bypass this check: git commit --no-verify"
        echo ""
        exit 1
    fi
else
    echo "   ℹ️  No SST-related files in this commit (skipping SST validation)"
fi

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# ============================================================================
# Equation snippet indentation check: Prevent indentation ping-pong
# ============================================================================
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📏 Checking equation snippet indentation..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check if any Equations/*.tex files are being modified
EQUATIONS_FILES=$(git diff --cached --name-only | grep "^Equations/.*\.tex$" || true)

if [ -n "$EQUATIONS_FILES" ]; then
    echo "   📝 Equation snippet files detected in commit"
    
    INDENTATION_ISSUES=0
    for file in $EQUATIONS_FILES; do
        # Check if file starts with spaces (State B - incorrect)
        if git diff --cached "$file" | grep "^+.*\\\\begin{" | head -1 | grep -E "^\+  \\\\" >/dev/null 2>&1; then
            echo -e "${RED}   ❌ VIOLATION: $file has file-level indentation (State B)${NC}"
            echo "      File should NOT have leading spaces at the start"
            echo "      Run: sed 's/^  //' $file > /tmp/fix && mv /tmp/fix $file"
            INDENTATION_ISSUES=$((INDENTATION_ISSUES + 1))
        fi
    done
    
    if [ $INDENTATION_ISSUES -gt 0 ]; then
        echo ""
        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${RED}❌ INDENTATION PING-PONG DETECTED${NC}"
        echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        echo "Equation snippet files should NOT have file-level indentation."
        echo "This causes indentation ping-pong between latexindent and editors."
        echo ""
        echo "To fix:"
        echo "  1. Remove leading spaces: sed 's/^  //' <file> > /tmp/fix && mv /tmp/fix <file>"
        echo "  2. Run latexindent: latexindent -w <file> -l .latexindent.yaml"
        echo "  3. Re-stage: git add <file>"
        echo ""
        echo "Background:"
        echo "  • State A (correct): \\begin{equation} at column 0"
        echo "  • State B (incorrect):   \\begin{equation} with leading spaces"
        echo "  • See commit history for Equations/splurge.tex ping-pong example"
        echo ""
        echo "To bypass this check: git commit --no-verify"
        echo ""
        exit 1
    fi
    
    echo -e "${GREEN}   ✅ Equation snippet indentation OK${NC}"
else
    echo "   ℹ️  No equation snippet files in this commit"
fi

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Get staging statistics
ADDED=$(git diff --cached --numstat | awk '{sum += $1} END {print sum+0}')
DELETED=$(git diff --cached --numstat | awk '{sum += $2} END {print sum+0}')
FILES_CHANGED=$(git diff --cached --name-only | wc -l)
CRITICAL_FILES=$(git diff --cached --name-only | grep -E '\.(tex|sty|bib)$' | wc -l)

echo "📊 Change Summary:"
echo "   Files changed: $FILES_CHANGED"
echo "   Lines added: $ADDED"
echo "   Lines deleted: $DELETED"
echo "   Critical LaTeX files: $CRITICAL_FILES"

# Define thresholds for safety checks
LARGE_CHANGE_THRESHOLD=500
MASSIVE_CHANGE_THRESHOLD=2000
MANY_FILES_THRESHOLD=15
CRITICAL_FILES_THRESHOLD=10

# Check for potentially dangerous patterns
DANGEROUS_PATTERNS=0
if [ $DELETED -gt $LARGE_CHANGE_THRESHOLD ]; then
    echo -e "${YELLOW}⚠️  WARNING: Large deletion detected ($DELETED lines)${NC}"
    DANGEROUS_PATTERNS=$((DANGEROUS_PATTERNS + 1))
fi

if [ $FILES_CHANGED -gt $MANY_FILES_THRESHOLD ]; then
    echo -e "${YELLOW}⚠️  WARNING: Many files changed ($FILES_CHANGED files)${NC}"
    DANGEROUS_PATTERNS=$((DANGEROUS_PATTERNS + 1))
fi

if [ $CRITICAL_FILES -gt $CRITICAL_FILES_THRESHOLD ]; then
    echo -e "${YELLOW}⚠️  WARNING: Many critical LaTeX files modified ($CRITICAL_FILES files)${NC}"
    DANGEROUS_PATTERNS=$((DANGEROUS_PATTERNS + 1))
fi

# Check for specific risky patterns
git diff --cached --name-only | while read file; do
    if [[ "$file" =~ \.(tex|sty)$ ]]; then
        # Check for massive syntax changes (like onlyinsubfile <-> whenstandalone)
        SYNTAX_CHANGES=$(git diff --cached "$file" | grep -E "^[\+\-].*\\\\(onlyinsubfile|whenstandalone)" | wc -l)
        if [ $SYNTAX_CHANGES -gt 5 ]; then
            echo -e "${YELLOW}⚠️  WARNING: Massive LaTeX syntax changes in $file${NC}"
            DANGEROUS_PATTERNS=$((DANGEROUS_PATTERNS + 1))
        fi
    fi
done

# Show files being modified
if [ $FILES_CHANGED -gt 0 ]; then
    echo -e "\n📁 Files being modified:"
    git diff --cached --name-status | head -15
    if [ $FILES_CHANGED -gt 15 ]; then
        echo "   ... and $((FILES_CHANGED - 15)) more files"
    fi
fi

# CRITICAL: Require confirmation for dangerous changes
if [ $DELETED -gt $MASSIVE_CHANGE_THRESHOLD ] || [ $FILES_CHANGED -gt 30 ] || [ $DANGEROUS_PATTERNS -gt 2 ]; then
    echo -e "\n${RED}🚨 CRITICAL WARNING: POTENTIALLY MASSIVE RESTORATION/DELETION DETECTED! 🚨${NC}"
    echo -e "${RED}This commit could accidentally delete important functionality.${NC}"
    echo ""
    echo "Recent history shows multiple major restorations were needed."
    echo "Are you ABSOLUTELY SURE you want to proceed?"
    echo ""
    echo -e "${YELLOW}Type 'CONFIRM_MASSIVE_CHANGE' to proceed (case-sensitive):${NC}"
    read -r confirmation
    
    if [ "$confirmation" != "CONFIRM_MASSIVE_CHANGE" ]; then
        echo -e "${RED}❌ Commit blocked for safety. Use 'git commit --no-verify' to override.${NC}"
        exit 1
    fi
    echo -e "${GREEN}✅ User confirmed massive change.${NC}"
fi

# Standard safety confirmation for moderate changes
if [ $DANGEROUS_PATTERNS -gt 0 ] && [ $DELETED -gt $LARGE_CHANGE_THRESHOLD ]; then
    echo -e "\n${YELLOW}⚠️  This commit has potentially risky changes.${NC}"
    echo -e "Continue? ${GREEN}[y/N]${NC}: "
    read -r response
    case "$response" in
        [yY][eE][sS]|[yY])
            echo -e "${GREEN}✅ Proceeding with commit...${NC}"
            ;;
        *)
            echo -e "${RED}❌ Commit cancelled. Use 'git commit --no-verify' to override.${NC}"
            exit 1
            ;;
    esac
fi

echo -e "${GREEN}✅ Pre-commit safety check passed!${NC}"
exit 0 
